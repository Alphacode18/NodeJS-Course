1. SQL vs NoSQL
---------------

Goal: Store Data and Make it easily accessible!

SQL
---

- SQL predominantly works with Tables. A shop can have user, product and order table with fields or columns and records or rows.
- They allow relations. For example, a order table can have relationship between users and products.
- Strong data schema is a must. Requires a lot of thought during architecture.
- Schema is basically how data has to look like
- Relations can be one-to-one, one-to-many and many-to-many
- SQL stands for Structured Query Language. Queries are key to obtain data. Example, SELECT * FROM users WHERE age > 28. This is a Query
- In the above example, capital words are SQL verbs and lower letters are parameters.

NoSQL
-----

- NoSQL still has a database but instead of tables, it has collections which can be more or less thought as cables
- No records (rows) but it consists of documents. Example, {name: 'Manny', age: 28}. Looks a lot like JS objects.
- NoSQL is schemaless
- No kind of relations, so we go for duplicate data 
Example:
orders
------
{id: fe23, user:{id: 234, name: 'Max', age: 24}, product:{id: 543, name: 'MacBook Pro', price: 1800}}
user
----
{id: 234, name: 'Max', age: 24}
product
-------
{id: 543, name: 'MacBook Pro', price: 1800}

- In the above arguement we see nested documents
- You can connect documents but that can slow the process of querying down!

Vertical vs Horizontal Scaling
------------------------------

Horizontal Scaling
- Buy more servers and split data across servers.
- Infinite servers

Vertical Scaling
- Make CPU, Memory, etc stronger.
- Easier but limited in resources at some point.

SQL
- SQL uses schemas, relations and data is distributed across multiple servers. Thus horizontal scaling is impossible, while vertical is possible!
- Limitations for multiple (thousands) read and write per second

NoSQL
- No Schema, No or very few relations and data is typically merged in few collections.
- Both Vertical and Horizontal scaling favourable!
- Great performance for high read and write request!

Edit: MySQL setup complete.


Sequelize
---------

- Sequelize is an ORM (Object Relational Mapping Library), which means it does all the heavy lifting behind the scenes.
- Core includes Models (Tables), Instances (Rows), Utility Functions (Queries) and Mapping (Relational Databasing)
- Sequelize requires mysql2 package to work!


Associations
------------

- A shop has products, cart, orders and users.
- A product can have many carts.
- A product can be part of multiple orders.
- A user can have only one cart.
- A user can have multiple orders.
- A user can create multiple products.
